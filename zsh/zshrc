#!/bin/zsh
## vim:ft=zsh

[[ -d "$HOME/bin" ]] && path=("$HOME/bin" $path )

(( ${+_ZSHRC_ZPROF} )) && {
  zmodload zsh/zprof
  zmodload zsh/datetime
  builtin printf '%b\n' "\033[0;31mZSHRC: Profiling!\033[0;0m"
  float -g _ZSHRC_ZPROF_TIME_BEGINS="${EPOCHREALTIME}"
}

### OS & Terminal Emulator Detection
unamestr=`uname`
unamearch=`uname -m`
if [[ "$unamestr" == 'Linux' ]]; then
  # Get the terminal emulator
  platform='Linux'
  if (( $PPID > 0 )); then
    TERM_PROGRAM=$(ps -fo cmd -hwcp $PPID )
    [[ ${TERM_PROGRAM[-1]} == '-' ]] && TERM_PROGRAM=${TERM_PROGRAM[0,-2]}
  else
    # we have no parent process
    # are we in docker?:
    if cat /proc/1/cgroup | grep docker -qa; then
      # yes
      TERM_PROGRAM="docker"
    fi
  fi
elif [[ "$unamestr" == 'Darwin' ]]; then
  # TERM_PROGRAM should already be set
  platform='Darwin'
  # Fix for some missing paths
  if [ -s /etc/paths ]; then
    local etcpaths
    declare -a etcpaths; etcpaths=( ${(f)"$(</etc/paths)"} )
    for pathitem in ${etcpaths} ; do
      if [[ ! ${path[(r)$pathitem]} == "$pathitem" ]]; then
        path+=($pathitem)
      fi
    done
  fi
else
  # Unsupported OS!
  printf '%b\n' "\033[0;31mZSHRC: Unsupported operating system!\
  Some things may break, or you might be missing functionality!\033[0m"
fi

# Set zrllink utility.
if (( ${+commands[rllink]} )); then
  function zrllink() {
    rllink -f $1
  }
elif (( ${+commands[readlink]} )); then
  function zrllink() {
    readlink -f $1
  }
  if [ "$platform" == "Darwin" ]; then
    function zrllink() {
      readlink $1
    }
  fi
elif (( ${+commands[perl]} )); then
  function zrllink() {
    perl -MCwd -le 'print Cwd::abs_path(shift)' $1
  }
else
  printf '%b\n' "\033[0;31mZSHRC: Couldn't find a valid symlink resolver! ZSHRC may not load correctly!\033[0m"
fi

### Configs install location detection
_ZSHRC_SCRIPTPATH="${(%):-%N}"
_ZSHRC_INSTALL_LOC=$(zrllink "$_ZSHRC_SCRIPTPATH")
_ZSHRC_INSTALL_DIR="${_ZSHRC_INSTALL_LOC%/*}"

### VTE Setup (nonlogin shell problem)
if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
  # on Ubuntu it's in vte-2.91.sh sometimes for whatever reason?
  if [[ -s '/etc/profile.d/vte.sh' ]]; then
    _ZSHRC_VTE_CONF_SETUP_FILE='/etc/profile.d/vte.sh'
  elif [[ -s '/etc/profile.d/vte-2.91.sh' ]]; then
    _ZSHRC_VTE_CONF_SETUP_FILE='/etc/profile.d/vte-2.91.sh'
  fi

  if [[ -n "$_ZSHRC_VTE_CONF_SETUP_FILE" ]]; then
    source $_ZSHRC_VTE_CONF_SETUP_FILE
  fi
fi

### ZSH Theme selection
# ZSH Theme emulating the Fish shell's default prompt.
# Note this is the barebones version just as a fallback

_fishy_collapsed_wd() {
  echo $(pwd | perl -pe '
   BEGIN {
      binmode STDIN,  ":encoding(UTF-8)";
      binmode STDOUT, ":encoding(UTF-8)";
   }; s|^$ENV{HOME}|~|g; s|/([^/.])[^/]*(?=/)|/$1|g; s|/\.([^/])[^/]*(?=/)|/.$1|g
')
}

setopt promptsubst
local user_color='green'; [[ $UID == 0 ]] && user_color='red'
PROMPT='%n@%m %{$fg[$user_color]%}$(_fishy_collapsed_wd)%{$reset_color%}%(!.#.>) '
local return_status="%{$fg_bold[red]%}%(?..%?)%{$reset_color%}"
PROMPT2="%{$fg[red]%}$return_status\ %{$reset_color%}"

# Powerline available theme
Z_DEFAULT_POWERLINE_THEME="zinc"
case "$TERM_PROGRAM" in
  'python2'|\
  'terminator'|\
  'iTerm.app'|\
  'gnome-terminal'|\
  'tmux'|\
  'tilix')
    ZSH_THEME="$Z_DEFAULT_POWERLINE_THEME"
    ;;
  'sshd')
    ZSH_THEME="${ZSH_THEME:-${Z_DEFAULT_POWERLINE_THEME}}"
    ;;
  'login')
    # this is common for linux vttys, so no symbols pls
    ZSH_THEME="fishy"
    ;;
  'zsh'|*)
    # Try to keep the same theme if it's already set.
    if [[ -z "$ZSH_THEME" ]]; then
      ZSH_THEME="fishy"
    fi
    ;;
esac
export ZSH_THEME

ENABLE_CORRECTION="true"
COMPLETION_WAITING_DOTS="false"

if [[ "${Z_LSBASE}" == "" ]]; then
  # used for a few plunks
  export Z_LSBASE='ls'
  export Z_LSARG_LONG='-l'
  export Z_LSARG_ALL='-a'
  if [[ "$platform" == "Linux" ]]; then
    Z_LSARG_HUMAN=("--color=tty" "-h")
    export Z_LSARG_HUMAN
    export Z_LSARG_FORCE_COLOR='--color=always'
  elif [[ "$platform" == "Darwin" ]]; then
    export Z_LSARG_HUMAN='-h'
    export Z_LSARG_FORCE_COLOR='-G'
  fi
fi

### Load extra completions
# autoload -Uz compdef
[[ -d "$_ZSHRC_INSTALL_DIR/fpath" ]] && fpath+=("$_ZSHRC_INSTALL_DIR/fpath")
typeset -U fpath
export FPATH

### Plunks
# PLugin chUNKS
plunks=(
  lca # last command arguments
  presenter-mode # zsh for presenting to groups
  lslbntl # ls long, but not too long
  fancy-docker # for when you really just want a progress bar
  rtabfunc # rtab with fixes as a zsh function
  fzy-tmux # tmux fuzzy selector
  command-not-found # less of omz
  zinit-zsh # zsh itself
)
typeset -U plunks

### Load Plunks
# little bits of plugins that I plop down
_ZSHRC_PLUNK_LOCATION="$_ZSHRC_INSTALL_DIR/plunks"
# PLugin chUNKS
for plunk in "${plunks[@]}"; do
  local plunkfile="$_ZSHRC_PLUNK_LOCATION/${plunk}.zsh"
  # [[ -s ${plunkfile} ]] || zcompile "${plunkfile}"
  source "${plunkfile}"
done

function plunkcompile {
  autoload -U zargs
  zargs -L1 -- $_ZSHRC_PLUNK_LOCATION/*.zsh -- builtin zcompile
}

### Load framework

# Check that zinit is installed
if [[ -s "$HOME/.zinit/bin/zinit.zsh" ]]; then

  source "$HOME/.zinit/bin/zinit.zsh"

  ### ZSH Module
  if [[ -s "$HOME/.zinit/bin/zmodules/Src/zdharma/zinit.so" ]]; then
    module_path+=( "$HOME/.zinit/bin/zmodules/Src" )
    zmodload zdharma/zinit
  fi

  ### Dependencies

  # OMZ libraries
  local _ZSHRC_OMZ_SRCS
  _ZSHRC_OMZ_SRCS=(
    # lib/compfix.zsh
    lib/completion.zsh
    # lib/directories.zsh
    lib/functions.zsh
    lib/grep.zsh
    lib/history.zsh
    # lib/key-bindings.zsh
    lib/misc.zsh
    lib/spectrum.zsh
    lib/termsupport.zsh
    # lib/theme-and-appearance.zsh

    plugins/z/z.sh
    plugins/git/git.plugin.zsh
    # plugins/command-not-found/command-not-found.plugin.zsh

    themes/fishy.zsh-theme
  )

  zinit from"gh" pick"lib/git.zsh" nocompletions blockf \
    multisrc"${_ZSHRC_OMZ_SRCS}" compile"${_ZSHRC_OMZ_SRCS}" \
    for @robbyrussell/oh-my-zsh

  ### Theme

  if [[ "$ZSH_THEME" == "p9k" ]]; then
    source $_ZSHRC_PLUNK_LOCATION/zinit-powerlevel9k.zsh
  fi

  if [[ "$ZSH_THEME" == "zinc" ]]; then
    zinit ice from"gl" if'[[ "$ZSH_THEME" == "zinc" ]]' nocompletions \
      id-as'zinc' atpull'prompt_zinc_compile' compile"{zinc_functions/*,segments/*,zinc.zsh}"
    if [[ -d $HOME/code/zinc ]]; then
      zinit load $HOME/code/zinc
      prompt_zinc_setup dev robobenklein
    else
      zinit light robobenklein/zinc
      prompt_zinc_setup robobenklein
    fi
  fi
  if [[ "$ZSH_THEME" == "zinc2" ]]; then
    zinit ice from"gl" if'[[ "$ZSH_THEME" == "zinc2" ]]' nocompletions \
      id-as'zinc2' atpull'prompt_zinc_compile' compile"{zinc_functions/*,segments/*,zinc.zsh}"
    zinit load $HOME/code/zinc2
    prompt_zinc_setup dev robobenklein
  fi
  ### Normal Plugins
  # wait'0' plugins are after-prompt loaded.

  zinit atclone"dircolors -b LS_COLORS > clrs.zsh" atpull'%atclone' pick"clrs.zsh" \
    for @trapd00r/LS_COLORS

  # exa is only available for 64bit Linux & MacOS (by github release)
  if [[ $unamearch == "x86_64" ]]; then
    if [[ $unamestr == "Linux" ]]; then
      zinit ice nocompletions from"gh-r" bpick"*-linux-$unamearch-*" \
        as"program" mv"exa-linux-* -> exa" pick"exa"
    elif [[ $unamestr == "Darwin" ]]; then
      zinit ice nocompletions from"gh-r" bpick"*-macos-$unamearch-*" \
        as"program" mv"exa-macos-* -> exa" pick"exa"
    else
      zinit ice nocompletions from"gh-r" bpick"*-$unamestr-$unamearch-*" \
        as"program" mv"exa-* -> exa" pick"exa"
      printf '%b\n' "\033[0;33mZSHRC: Warning: EXA auto-install probably not available.\033[0;0m"
    fi
    zinit load ogham/exa
  fi

  zinit from"gh" wait'0' blockf \
    for @zsh-users/zsh-completions

  zinit from"gh" wait'0' lucid \
    for @robobenklein/k

  # zinit from"gh" wait'0' lucid \
  zinit from"gh" lucid \
    for @robobenklein/zdharma-history-search-multi-word

  # zinit from"gh" wait'0' lucid as"program" pick"bin/git-dsf" \
  #   for @zdharma/zsh-diff-so-fancy

  #zinit from"gh" wait'1' atload'zinc_optional_depenency_loaded' \
  #  for @romkatv/gitstatus

  zinit from"gh" lucid as"program" pick"fzy" make light-mode \
    for @jhawthorn/fzy

  zinit from"gh" atload'zpcompinit; zpcdreplay' wait'0' \
    for @robobenklein/zdharma-fast-syntax-highlighting

  function zinit-setup-zsh-dev () {
    # zinit from"gh" blockf nocompletions \
    #   for @zdharma/zui
    #
    # zinit from"gh" lucid \
    #   for @zdharma/zbrowse
    #
    # zinit from"gh" lucid as"program" pick"build/zsd*" make \
    #   for @zdharma/zshelldoc

    zinit from"gh" lucid as"program" pick"revolver" \
      for @molovo/revolver

    zinit from"gh" lucid as"program" pick"zunit" \
      atclone"cd zunit && ./build.zsh && chmod u+x ./zunit" atpull"%atclone" \
      for @zunit-zsh/zunit
  }

  source $_ZSHRC_PLUNK_LOCATION/zinit-neovim.zsh

  source $_ZSHRC_PLUNK_LOCATION/zinit-bat.zsh

  # zpcompinit

else
  # Try to install it
  printf '%b\n' "\033[0;31mZSHRC: Couldn't find ~/.zinit/bin/zinit.zsh!\033[0m"
  if [ -s "$_ZSHRC_INSTALL_DIR/../install" ]; then
    printf '%b\n' "\033[0;31mZSHRC: zinit not found!\033[0m"
    printf '%b\n' "Trying installing the configs repo at $_ZSHRC_INSTALL_DIR ..."
    pushd $_ZSHRC_INSTALL_DIR/../
    ./install
    popd
    zsh -i -c -- '@zinit-scheduler burst || true'
  fi
fi

### User configuration

# the background color for the terminal emulator
TERM_EMULATOR_BG_DEFAULT="#444444"

# History
HISTSIZE=500000
SAVEHIST=500000
HISTFILE="$HOME/.zsh_history"
setopt extendedhistory
setopt nohistignoredups
setopt no_incappendhistory
is-at-least 5.5 && setopt no_incappendhistory_time
setopt sharehistory

[[ -s "$HOME/.pythonz/etc/bashrc" ]] && source "$HOME/.pythonz/etc/bashrc"

# Go environment
[[ -d "$HOME/code/go" ]] && export GOPATH="$HOME/code/go"
[[ -d "$HOME/code/go/bin" ]] && path+=("$HOME/code/go/bin")

# NVM nodejs
if [[ -d "$HOME/.nvm" ]]; then
  export NVM_DIR="$HOME/.nvm"
  [[ -s "$NVM_DIR/nvm.sh" ]] && \. "$NVM_DIR/nvm.sh"
  [[ -s "$NVM_DIR/bash_completion" ]] && \. "$NVM_DIR/bash_completion"
fi

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
if [[ -d "$HOME/.rvm" ]]; then
  # export PATH="$PATH:$HOME/.rvm/bin"
  path+=("$HOME/.rvm/bin")
fi

# Fix that guake doesn't set TERM properly
# it actually does have 256color...
if [[ "$TERM_PROGRAM" == "python2" ]] && [[ "$TERM" == "xterm" ]]; then
  TERM=xterm-256color
fi

# You may need to manually set your language environment
#export LANG=en_US.UTF-8

### Functions

# function which properly sets up vi mode things in order
function zsh_start_vi_mode() {
  export KEYTIMEOUT=1

  zinit snippet OMZ::plugins/vi-mode/vi-mode.plugin.zsh

  #bindkey -v
  POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS+=( vi_mode )
  # in vi command mode:
  bindkey -M vicmd '?' history-incremental-search-backward
  bindkey -M vicmd '/' history-incremental-search-forward
  bindkey -M vicmd "k" up-line-or-beginning-search
  bindkey -M vicmd "j" down-line-or-beginning-search
  bindkey -M vicmd "^V" edit-command-line
  # Up/down as history partial search
  bindkey "^[OA" up-line-or-beginning-search
  bindkey "^[OB" down-line-or-beginning-search
}

### Personal shortcuts and aliases

alias zvi=zsh_start_vi_mode

if (( ${+commands[exa]} )) && command exa -v >/dev/null 2>&1; then
  export Z_LSBASE='exa'
  Z_LSARG_HUMAN=('--git')
  export Z_LSARG_HUMAN
  export Z_LSARG_LONG='--long'
  export Z_LSARG_ALL='-aa'
  export Z_LSARG_DEFAULTS='-g'
  export Z_LSARG_FORCE_COLOR='--color=always'
fi

# Dirs
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g ......='../../../../..'
alias 1='builtin cd -1'
alias 2='builtin cd -2'
alias 3='builtin cd -3'
alias 4='builtin cd -4'
alias 5='builtin cd -5'
alias 6='builtin cd -6'
alias 7='builtin cd -7'
alias 8='builtin cd -8'
alias 9='builtin cd -9'
alias md='mkdir -p'

(( $+aliases[run-help] )) && unalias run-help
autoload -Uz run-help
bindkey "^[h" run-help

if [[ ${precmd_functions[(r)_z_precmd]} == "_z_precmd" ]]; then
  # move the _z_precmd to the prexec, so it only adds with commands executed,
  # not with prompts drawn
  precmd_functions=(${precmd_functions%_z_precmd})
  preexec_functions+=(_z_precmd)
fi

# Editor
if (( ${+commands[nvim]} )); then
  export EDITOR='nvim'
elif (( ${+commands[vim]} )); then
  export EDITOR='vim'
elif (( ${+commands[vi]} )); then
  export EDITOR='vi'
elif (( ${+commands[nano]} )); then
  export EDITOR='nano'
fi
alias v="$EDITOR"

# ls shortcuts

alias l="lslbntl" # from the plunk
alias ll="$Z_LSBASE $Z_LSARG_HUMAN $Z_LSARG_LONG $Z_LSARG_DEFAULTS"
alias la="$Z_LSBASE $Z_LSARG_HUMAN $Z_LSARG_LONG $Z_LSARG_ALL $Z_LSARG_DEFAULTS"

# cannot ((${+commands})) because it is an alias
if (( ${+aliases[d]} )); then
  unalias d >/dev/null 2>&1
fi
function d () {
  if [[ -n $1 ]]; then
    dirs "$@"
  else
    dirs -v | head -10
  fi
  (( ${+functions[_d]} )) || {
    function _d() { _dirs "$@" }
  }
}
compdef d=dirs

# auto-fzy cd
function cdaf () {
  if [[ -d $1 ]]; then
    builtin cd "$@"
  else
    local -a locations
    local val
    val=0
    if [[ -n $1 ]]; then
      locations+=(
        "${(@f)$(_z -cl "$@" 2>&1 | tac)}"
      )
      # locations+=("${(r:10:)val} $HOME")
    else
      locations+=("${(r:10:)val} $HOME")
      locations+=(
        "${(@f)$(_z -l 2>&1 | tac)}"
      )
    fi
    local godir=($(builtin print ${(j.\n.)locations} | fzy)) && {
      (( #godir > 0 )) || return 0
      shift godir
      [[ ! -z $godir ]] && builtin cd "${godir}"
    }
  fi
}
# compdef _z_zsh_tab_completion cd
alias cd=cdaf

# auto-cat for dirs
(( ${+commands[bat]} )) && _c_cat_cmd=('bat' '-pp') || _c_cat_cmd=('cat')
function c () {
  if [[ -d $1 ]]; then
    lslbntl "$@"
  else
    $_c_cat_cmd "$@"
  fi
}

if (( ${+commands[rsync]} )); then
  function cprp () {
    rsync -r --info=progress2 --delay-updates --partial-dir=.rsync-partial "$@"
  }
  compdef _rsync cprp
fi

alias gpg-message="gpg2 -a -es -r"
alias gpg-sign="gpg2 -a -s"
if (( ${+commands[atom]} )); then
  alias a="atom"
  alias a.="atom ."
fi
if (( ${+commands[nautilus]} )); then
  alias n="nautilus"
fi
if (( ${+commands[git-lfs]} )); then
  alias glfs="git-lfs"
fi
if (( ${+commands[virtualenv]} )); then
  alias venv="virtualenv"
fi
if (( ${+commands[bundle]} )); then
  alias bexec="bundle exec"
fi
if command -v bfg.jar > /dev/null 2>&1 && (( ${+commands[java]} )); then
  alias bfg="java -jar $(which bfg.jar )"
fi
alias m="make"
alias pu="pushd"
alias po="popd"

# CD Git root
alias cdg='cd $(git rev-parse --show-toplevel)'
# normalized git branch name ('/' -> '_')
function git_branch_norm() {
  local sr=$(git symbolic-ref HEAD )
  function {
    echo ${(j._.)@[3,-1]}
  } "${(@s:/:)sr}"
}

# dirs
setopt auto_pushd
setopt autocd
setopt pushd_ignore_dups
setopt pushdminus

# other options
setopt mail_warning

# up/down history search
autoload -Uz +X up-line-or-beginning-search
autoload -Uz +X down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search
bindkey "^[[B" down-line-or-beginning-search
bindkey '\eOA' up-line-or-beginning-search # or ^[OA
bindkey '\eOB' down-line-or-beginning-search # or ^[OB
# ctrl-E
bindkey '\e[H' beginning-of-line
# ctrl-H
bindkey '\e[F' end-of-line
# ctrl-left/right
bindkey '^[[1;5C' forward-word
bindkey '^[[1;5D' backward-word
# force shift-tab to work as expected in completions
bindkey -M menuselect '^[[Z' reverse-menu-complete
# enter on numpad
bindkey -s "^[OM" "^M"
# edit line in editor
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

bindkey '^K' kill-line
bindkey '^Q' push-line

### After the last of the compdefs

{ # idea totally stolen from prezto
  # Compile the completion dump to increase startup speed.
  zcompdump="${ZDOTDIR:-$HOME}/.zcompdump"
  if [[ -s "$zcompdump" && (! -s "${zcompdump}.zwc" || "$zcompdump" -nt "${zcompdump}.zwc") ]]; then
    zcompile "$zcompdump"
  fi
} &!

### PATH configuration

builtin dirs -c # on new zsh - no previous dirstack

[[ -d "$HOME/code/configs/sbin" ]] && hash -d sa="$HOME/code/configs/sbin"

# Keep this clean!
typeset -U path # unique items only in path array

# Add .local/bin to path with priority,
[[ -d "$HOME/.local/bin" ]] && path[1,0]="$HOME/.local/bin"

# Place home bin at front of path
[[ -d "$HOME/bin" ]] && path[1,0]="$HOME/bin"

export PATH

# EOF
ZSHRC_LOADED=true

(( ${+_ZSHRC_ZPROF} )) && {
  float -g _ZSHRC_ZPROF_EPOCH_DIFF="$(( EPOCHREALTIME - _ZSHRC_ZPROF_TIME_BEGINS ))"
  builtin printf '%b\n' "\033[0;94mZSHRC_ZPROF: total millis time, avg millis time / call, percentage time\033[0;0m"
  zprof | head -12
  echo
  builtin printf '%b ' "\033[0;31mZSHRC: Done Profiling!\033[0;0m"
  builtin print -f 'Load time: %.6f\n' "${_ZSHRC_ZPROF_EPOCH_DIFF}"
  (( ${+functions[zinit]} )) && {
    builtin printf '%b ' "\033[0;31mZSHRC: zinit non-async plugins:\033[0;0m"
    zinit times
  }
} || true
